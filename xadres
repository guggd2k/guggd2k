#include <stdio.h>

#define MOVIMENTOS 3 // Número de casas para a recursividade

// ------------------ Funções Recursivas ------------------

// Torre: movimenta-se para cima e direita de forma recursiva
void moverTorreCima(int passos) {
    if (passos == 0) return;
    printf("Cima\n");
    moverTorreCima(passos - 1);
}

void moverTorreDireita(int passos) {
    if (passos == 0) return;
    printf("Direita\n");
    moverTorreDireita(passos - 1);
}

// Bispo: recursivo + loop aninhado (diagonal direita superior)
void moverBispo(int linhas, int colunas) {
    if (linhas == 0 || colunas == 0) return;
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            if (i == j) {
                printf("Diagonal para Cima e Direita\n");
            }
        }
    }
    moverBispo(linhas - 1, colunas - 1);
}

// Rainha: combinação de Torre + Bispo
void moverRainha(int passos) {
    moverTorreCima(passos);
    moverTorreDireita(passos);
    moverBispo(passos, passos);
}

// Cavalo: loops aninhados + controle com break/continue
void moverCavalo(int linhas, int colunas) {
    printf("\nMovimento do Cavalo (L para cima e direita):\n");
    for (int i = 0; i <= linhas; i++) {
        for (int j = 0; j <= colunas; j++) {
            // Condição para o movimento "L": 2 para cima (i), 1 para direita (j)
            if (i == 2 && j == 1) {
                printf("Cavalo se move em L: 2 casas para cima e 1 para direita\n");
                break;
            }
            if (i == j) continue; // Exemplo de controle com continue
        }
    }
}

// ------------------ Função Principal ------------------

int main() {
    int movimentos = MOVIMENTOS;

    printf("Movimento da Torre:\n");
    moverTorreCima(movimentos);
    moverTorreDireita(movimentos);

    printf("\nMovimento do Bispo:\n");
    moverBispo(movimentos, movimentos);

    printf("\nMovimento da Rainha:\n");
    moverRainha(movimentos);

    moverCavalo(3, 3); // Parâmetros fixos como solicitado

    return 0;
}
